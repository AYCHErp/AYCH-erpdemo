<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    
    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <!-- SCIPIO: New Setup Component Events
        NOTE: the original ofbizsetup methods are found (and still referenced) in:
          component://commonext/script/org/ofbiz/setup/SetupEvents.xml -->
          
    <simple-method method-name="updateOrganization" short-description="Update Organization" login-required="true">
        <!-- verify fields -->
        <call-simple-method method-name="verifyOrganizationFields" xml-resource="component://commonext/script/org/ofbiz/setup/SetupEvents.xml"/>

        <!-- update groupName -->
        <set-service-fields service-name="updatePartyGroup" map="parameters" to-map="updatePartyGroupCtx"/>
        <call-service service-name="updatePartyGroup" in-map-name="updatePartyGroupCtx"/>
        <check-errors/>
        
        <set field="partyId" from-field="parameters.partyId"/>
        
        <!-- SCIPIO: TODO: EVERYTHING BELOW NOT WORKING - NEEDS SPECIAL TESTS 
            createPartyContactMechPurpose NOT SUFFICIENT -->
        
        <!-- now that we have the partyId, put it where it needs to go... -->
        <set field="userLoginContext.partyId" from-field="tempMap.partyId"/>
        <set field="partyGroupContext.partyId" from-field="tempMap.partyId"/>
        <set field="partyRoleContext.partyId" from-field="tempMap.partyId"/>
        <set field="addressContext.partyId" from-field="tempMap.partyId"/>
        <set field="workPhoneContext.partyId" from-field="tempMap.partyId"/>
        <set field="faxPhoneContext.partyId" from-field="tempMap.partyId"/>
        <set field="mobilePhoneContext.partyId" from-field="tempMap.partyId"/>
        <set field="emailContext.partyId" from-field="tempMap.partyId"/>
        
        <!-- billing address -->
        <if-compare field="parameters.USE_ADDRESS" operator="equals" value="false">
            <!-- address not used, do nothing -->
            <else>
                <call-service service-name="updatePartyPostalAddress" in-map-name="addressContext">
                    <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
                </call-service>
                
                <!-- TODO: check USER_ADDRESS_UPDATEROLES FIRST -->
                
                <set field="addressPurposeContext.partyId" from-field="partyId"/>
                <!-- create the payment location -->
                <set field="addressPurposeContext.contactMechPurposeTypeId" value="PAYMENT_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
                <!-- also consider this address the general correspondence address -->
                <set field="addressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
                <!-- create the billing location -->
                <set field="addressPurposeContext.contactMechPurposeTypeId" value="BILLING_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
            </else>
        </if-compare>
        <!-- home phone -->
        <if-not-empty field="parameters.USER_HOME_CONTACT">
            <call-service service-name="updatePartyTelecomNumber" in-map-name="homePhoneContext">
                <result-to-field result-name="contactMechId" field="homePhonePurposeContext.contactMechId"/>
            </call-service>
            <set field="homePhonePurposeContext.partyId" from-field="partyId"/>
            <set field="homePhonePurposeContext.contactMechPurposeTypeId" value="PHONE_HOME"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
        </if-not-empty>
        <!-- work phone -->
        <if-not-empty field="parameters.USER_WORK_CONTACT">
            <call-service service-name="updatePartyTelecomNumber" in-map-name="workPhoneContext">
                <result-to-field result-name="contactMechId" field="workPhonePurposeContext.contactMechId"/>
            </call-service>
            <set field="workPhonePurposeContext.partyId" from-field="partyId"/>
            <set field="workPhonePurposeContext.contactMechPurposeTypeId" value="PHONE_WORK"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
        </if-not-empty>
        <!-- fax phone -->
        <if-not-empty field="parameters.USER_FAX_CONTACT">
            <call-service service-name="updatePartyTelecomNumber" in-map-name="faxPhoneContext">
                <result-to-field result-name="contactMechId" field="faxPhonePurposeContext.contactMechId"/>
            </call-service>
            <set field="faxPhonePurposeContext.partyId" from-field="partyId"/>
            <set field="faxPhonePurposeContext.contactMechPurposeTypeId" value="FAX_NUMBER"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="faxPhonePurposeContext"/>
        </if-not-empty>
        <!-- mobile phone -->
        <if-not-empty field="parameters.USER_MOBILE_CONTACT">
            <call-service service-name="updatePartyTelecomNumber" in-map-name="mobilePhoneContext">
                <result-to-field result-name="contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
            </call-service>
            <set field="mobilePhonePurposeContext.partyId" from-field="partyId"/>
            <set field="mobilePhonePurposeContext.contactMechPurposeTypeId" value="PHONE_MOBILE"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
        </if-not-empty>
        <!-- email address -->
        <if-not-empty field="parameters.USER_EMAIL">
            <call-service service-name="updatePartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailPurposeContext.contactMechId"/>
            </call-service>
            <set field="emailPurposeContext.partyId" from-field="partyId"/>
            <set field="emailPurposeContext.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
        </if-not-empty>

        <check-errors/>
    </simple-method>
          
    <simple-method method-name="createUser" short-description="Create Owner User" login-required="true">
        <set field="require_email" value="true"/>
        <set field="require_phone" value="false"/>
        <set field="require_login" value="false"/>
        <!-- this parameter must be set to true or the createUser method below will use a default password instead of the one entered by user -->
        <set field="create_allow_password" value="true"/>
        <set field="parameters.roleTypeId" value="OWNER"/>
        <set field="organizationPartyId" from-field="parameters.orgPartyId"/>
        <!-- <set field="personContext.partyId" from-field="parameters.customerPartyId"/> -->
        <call-simple-method  method-name="createUser" xml-resource="component://party/script/org/ofbiz/party/user/UserEvents.xml"/>
        
        <if-not-empty field="tempMap.partyId">
            <field-to-request request-name="userPartyId" field="tempMap.partyId" />

            <entity-one value-field="systemUserLogin" entity-name="UserLogin" use-cache="true"><field-map field-name="userLoginId" value="system"/></entity-one>
            <set field="createPartyRelationshipAndRoleCtx.partyIdFrom" from-field="organizationPartyId" />
            <set field="createPartyRelationshipAndRoleCtx.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO" />
            <set field="createPartyRelationshipAndRoleCtx.roleTypeIdTo" value="OWNER" />
            <set field="createPartyRelationshipAndRoleCtx.partyRelationshipTypeId" value="OWNER" />
            <set field="createPartyRelationshipAndRoleCtx.partyIdTo" from-field="tempMap.partyId" /> 
            <set field="createPartyRelationshipAndRoleCtx.userLogin" from-field="systemUserLogin" />
            <call-service service-name="createPartyRelationshipAndRole" in-map-name="createPartyRelationshipAndRoleCtx" />            
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="updateUser" short-description="Update Owner User" login-required="true">
<!--         <log level="always" message="parameters.userPartyId                         =================> ${parameters.userPartyId}" />
        
        <log level="always" message="parameters.USER_EMAIL_CONTACT_MECH_ID          =================> ${parameters.USER_EMAIL_CONTACT_MECH_ID}" />
        <log level="always" message="parameters.USER_POSTAL_ADDRESS_CONTACT_MECH_ID =================> ${parameters.USER_POSTAL_ADDRESS_CONTACT_MECH_ID}" />
        <log level="always" message="parameters.USER_WORK_NUMBER_CONTACT_MECH_ID    =================> ${parameters.USER_WORK_NUMBER_CONTACT_MECH_ID}" />
        <log level="always" message="parameters.USER_MOBILE_NUMBER_CONTACT_MECH_ID  =================> ${parameters.USER_MOBILE_NUMBER_CONTACT_MECH_ID}" />
        <log level="always" message="parameters.USER_FAX_NUMBER_CONTACT_MECH_ID     =================> ${parameters.USER_FAX_NUMBER_CONTACT_MECH_ID}" />   -->     
        
        <entity-one value-field="person" entity-name="Person"><field-map field-name="partyId" from-field="parameters.userPartyId"/></entity-one>
        <entity-one value-field="postalAddress" entity-name="PostalAddress"><field-map field-name="contactMechId" from-field="parameters.USER_POSTAL_ADDRESS_CONTACT_MECH_ID"/></entity-one>
        <entity-one value-field="workNumber" entity-name="TelecomNumber"><field-map field-name="contactMechId" from-field="parameters.USER_WORK_NUMBER_CONTACT_MECH_ID"/></entity-one>
        <entity-one value-field="mobileNumber" entity-name="TelecomNumber"><field-map field-name="contactMechId" from-field="parameters.USER_MOBILE_NUMBER_CONTACT_MECH_ID"/></entity-one>
        <entity-one value-field="faxNumber" entity-name="TelecomNumber"><field-map field-name="contactMechId" from-field="parameters.USER_FAX_NUMBER_CONTACT_MECH_ID"/></entity-one>
        <entity-one value-field="email" entity-name="ContactMech"><field-map field-name="contactMechId" from-field="parameters.USER_EMAIL_CONTACT_MECH_ID"/></entity-one>
        
        <call-simple-method method-name="validateUser"/>        
        
        <!-- <log level="always" message="emailMap       =================> ${emailMap}  | current email ========> ${email}" />
        <log level="always" message="addressMap     =================> ${addressMap} | current address ========> ${postalAddress}" />
        <log level="always" message="workPhoneMap   =================> ${workPhoneMap} | current work phone ========> ${workNumber}" />
        <log level="always" message="mobilePhoneMap =================> ${mobileMap} | current mobile phone ========> ${mobileNumber}" />
        <log level="always" message="faxPMap        =================> ${faxMap} | current fax ========> ${faxNumber}" /> -->
        <!-- see if we should continue now... -->
        <!-- <check-errors/> -->        
<!--         <set field="personMap.partyId" from-field="parameters.userPartyId" />
        <call-service service-name="updatePerson" in-map-name="personMap" />        
        
        <set field="emailMap.contactMechId" from-field="parameters.USER_EMAIL_CONTACT_MECH_ID" />
        <call-service service-name="updateEmailAddress" in-map-name="emailMap" /> -->
        <set field="addressChanged" value="${groovy: return(addressMessages != null &amp;&amp; addressMessages.size() == 1 &amp;&amp; addressMessages.get(0).getMessage().equals(&quot;addressDiffers&quot;))}" type="Boolean" />
        <log level="always" message="address changed =================> ${addressChanged}" />
        <if-compare field="addressChanged" operator="equals" value="true" type="Boolean">
			<set field="addressMap.contactMechId" from-field="parameters.USER_POSTAL_ADDRESS_CONTACT_MECH_ID" />
			<set field="addressMap.partyId" from-field="parameters.userPartyId" />
			<call-service service-name="updatePartyPostalAddress" in-map-name="addressMap" />
        </if-compare>
        
        <set field="emailChanged" value="${groovy: return(emailMessages != null &amp;&amp; emailMessages.size() == 1 &amp;&amp; emailMessages.get(0).getMessage().equals(&quot;emailDiffers&quot;))}" type="Boolean" />
        <log level="always" message="email changed =================> ${emailChanged}" />
        <if-compare field="emailChanged" operator="equals" value="true" type="Boolean">
            <set field="emailMap.contactMechId" from-field="parameters.USER_EMAIL_CONTACT_MECH_ID" />
            <set field="emailMap.partyId" from-field="parameters.userPartyId" />
            <call-service service-name="updatePartyEmailAddress" in-map-name="emailMap" />
        </if-compare>
        
        
        <if-compare field="personChanged" operator="equals" value="true" type="Boolean">            
            <set field="personMap.partyId" from-field="parameters.userPartyId" />
            <call-service service-name="updatePartyEmailAddress" in-map-name="personMap" />
        </if-compare>
    </simple-method>
    
    <!-- SCIPIO: based on component://commonext/script/org/ofbiz/setup/SetupEvents.xml#createDefaultWebsite -->
    <simple-method method-name="createWebSite" short-description="Create a WebSite, default webSiteId is ScipioWebStore.">
        <if-empty field="parameters.webSiteId">
            <property-to-field resource="scipiosetup" property="website.defaultInitialWebSiteId" field="defaultInitialWebSiteId"/>
            <if-not-empty field="defaultInitialWebSiteId">
                <entity-one entity-name="WebSite" value-field="defaultWebSite">
                    <field-map field-name="webSiteId" from-field="defaultInitialWebSiteId"/>
                </entity-one>
            </if-not-empty>
            <if-empty field="defaultWebSite">
                <set field="parameters.webSiteId" from-field="defaultInitialWebSiteId"/><!-- SCIPIO: new default value -->
                <else>
                    <sequenced-id field="parameters.webSiteId" sequence-name="WebSite"/>
                </else>
            </if-empty>
            <else>
                <!-- check if already exists so can give friendlier message -->
                <entity-one entity-name="WebSite" value-field="webSite">
                    <field-map field-name="webSiteId" from-field="parameters.webSiteId"/>
                </entity-one>
                <if-not-empty field="webSite">
                    <add-error>
                        <fail-property resource="ScipioSetupErrorUiLabels" property="SetupWebSiteIdAlreadyInUse"/>
                    </add-error>
                    <check-errors/>
                </if-not-empty>
            </else>
        </if-empty>
        <call-service service-name="createWebSite" in-map-name="parameters"/>
        <field-to-request request-name="webSiteId" field="parameters.webSiteId"/>
    </simple-method>
    
    <simple-method method-name="updateProdCatalogAndProductStoreCatalog" short-description="update ProdCatalog And ProductStoreCatalog">
        <set-service-fields service-name="updateProdCatalog" map="parameters" to-map="updateProdCatalogCtx"/>
        <call-service service-name="updateProdCatalog" in-map-name="updateProdCatalogCtx"/>
        <check-errors/>
        
        <set-service-fields service-name="updateProductStoreCatalog" map="parameters" to-map="updateProductStoreCatalogCtx"/>
        <call-service service-name="updateProductStoreCatalog" in-map-name="updateProductStoreCatalogCtx"/>
        <check-errors/>
    </simple-method>
    
    <simple-method method-name="deleteProdCatalogAndProductStoreCatalog" short-description="delete ProdCatalog And ProductStoreCatalog">
        <set-service-fields service-name="deleteProductStoreCatalog" map="parameters" to-map="deleteProductStoreCatalogCtx"/>
        <call-service service-name="deleteProductStoreCatalog" in-map-name="deleteProductStoreCatalogCtx"/>
        <check-errors/>

        <set-service-fields service-name="deleteProdCatalog" map="parameters" to-map="deleteProdCatalogCtx"/>
        <call-service service-name="deleteProdCatalog" in-map-name="deleteProdCatalogCtx">
            <default-message resource="ScipioSetupUiLabels" property="SetupCatalogStoreAssocRemoved"/>
        </call-service>
        <check-errors/>
    </simple-method>
    
    
    <simple-method method-name="validateUser" short-description="Validate User" login-required="false">
        <!-- timestamp to be used -->
        <now-timestamp field="nowStamp"/>

        <!-- setup the party/person --> 
        <log level="always" message="current person ========> ${person}" />       
        <call-map-processor in-map-name="parameters" out-map-name="personMap">
            <simple-map-processor name="personValid">
                <process field="USER_TITLE">
                    <copy to-field="personalTitle"/>
                </process>
                <process field="USER_FIRST_NAME">
                    <compare operator="not-equals" value="${person.firstName}"><fail-message message="personDiffers"/></compare>
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyFirstNameMissing"/></not-empty>
                </process>
                <process field="USER_LAST_NAME">
                    <compare operator="not-equals" value="${person.lastName}"><fail-message message="personDiffers"/></compare>
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyLastNameMissingError"/></not-empty>
                </process>
            </simple-map-processor>
        </call-map-processor>
        <check-errors/>
        <log level="always" message="personMap      =================> ${personMap}" />
        <call-map-processor in-map-name="personMap" out-map-name="personMap" error-list-name="personMessages">
            <simple-map-processor name="personChanges">
                <process field="personalTitle">
                    <compare operator="not-equals" value="${person.personalTitle}"><fail-message message="personDiffers"/></compare>                    
                </process>
                <process field="firstName">
                    <compare operator="not-equals" value="${person.firstName}"><fail-message message="personDiffers"/></compare>                    
                </process>
                <process field="lastName">
                    <compare operator="not-equals" value="${person.lastName}"><fail-message message="personDiffers"/></compare>                    
                </process>
            </simple-map-processor>
        </call-map-processor>
        
        <log level="always" message="personMessages =================> ${personMessages}" />
        <set field="personChanged" value="${groovy: return(personMessages != null &amp;&amp; personMessages.size() == 1 &amp;&amp; personMessages.get(0).getMessage().equals(&quot;personDiffers&quot;))}" type="Boolean" />
        <log level="always" message="person changed =================> ${personChanged}" />

        <!-- setup the email -->
        <call-map-processor in-map-name="parameters" out-map-name="emailMap" error-list-name="emailMessages">
            <simple-map-processor name="email">
                <process field="USER_EMAIL">
                    <compare-field operator="not-equals" field="email.infoString"><fail-message message="emailDiffers"/></compare-field>
                    <copy to-field="emailAddress"/>
                    <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                </process>
                <process field="USER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>

        <!-- setup the Postal Address -->
        <call-map-processor in-map-name="parameters" out-map-name="addressMap" error-list-name="addressMessages">        
            <simple-map-processor name="address">
                <process field="USER_ADDRESS1">
                    <compare-field operator="not-equals" field="postalAddress.address1"><fail-message message="addressDiffers"/></compare-field>
                    <copy to-field="address1"/>                    
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyAddressLine1MissingError"/></not-empty>
                </process>
                <process field="USER_ADDRESS2">
                    <compare-field operator="not-equals" field="postalAddress.address2"><fail-message message="addressDiffers"/></compare-field>
                    <copy to-field="address2" />
                </process>
                <process field="USER_CITY">
                    <compare-field operator="not-equals" field="postalAddress.city"><fail-message message="addressDiffers"/></compare-field>
                    <copy to-field="city"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyCityMissing"/></not-empty>
                </process>
                <process field="USER_STATE">
                    <compare-field operator="not-equals" field="postalAddress.stateProvinceGeoId"><fail-message message="addressDiffers"/></compare-field>
                    <copy to-field="stateProvinceGeoId"/>
                </process>
                <process field="USER_POSTAL_CODE">
                    <compare-field operator="not-equals" field="postalAddress.stateProvinceGeoId"><fail-message message="addressDiffers"/></compare-field>
                    <copy to-field="postalCode"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyZipCodeMissing"/></not-empty>
                </process>
                <process field="USER_COUNTRY">
                    <compare-field operator="not-equals" field="postalAddress.countryGeoId"><fail-message message="addressDiffers"/></compare-field>
                    <copy to-field="countryGeoId"/>
                    <not-empty><fail-property resource="CommonUiLabels" property="CommonCountryMissing"/></not-empty>
                </process>
                <process field="USER_ADDRESS_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        <!-- <if-compare value="USA" operator="equals" field="parameters.countryGeoId">
            <if-empty field="parameters.stateProvinceGeoId">
                <add-error>
                    <fail-property resource="PartyUiLabels" property="PartyStateInUsMissing"/>
                </add-error>
            </if-empty>
        </if-compare>
        <if-compare value="CAN" operator="equals" field="parameters.countryGeoId">
            <if-empty field="parameters.stateProvinceGeoId">
                <add-error>
                    <fail-property resource="PartyUiLabels" property="PartyProvinceInCanadaMissing"/>
                </add-error>
            </if-empty>
        </if-compare> -->

        <!-- Setup the Work Phone -->
        <call-map-processor in-map-name="parameters" out-map-name="workPhoneMap">
            <simple-map-processor name="workPhone">
                <process field="USER_WORK_COUNTRY"><copy to-field="countryCode"/></process>
                <process field="USER_WORK_AREA"><copy to-field="areaCode"/></process>
                <process field="USER_WORK_CONTACT">
                    <copy to-field="contactNumber"/>
                    <!-- <not-empty><fail-property resource="PartyUiLabels" property="PartyWorkPhoneContactNumberMissing"/></not-empty> -->
                </process>
                <process field="USER_WORK_EXT"><copy to-field="extension"/></process>
                <process field="USER_WORK_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>

        <!-- Setup the Mobile Phone -->
        <call-map-processor in-map-name="parameters" out-map-name="mobileMap">
            <simple-map-processor name="mobile">
                <process field="USER_MOBILE_COUNTRY"><copy to-field="countryCode"/></process>
                <process field="USER_MOBILE_AREA"><copy to-field="areaCode"/></process>
                <process field="USER_MOBILE_CONTACT">
                    <copy to-field="contactNumber"/>
                    <!-- <not-empty><fail-property resource="PartyUiLabels" property="PartyMobilePhoneContactNumberMissing"/></not-empty> -->
                </process>
                <process field="USER_MOBILE_EXT"><copy to-field="extension"/></process>
                <process field="USER_MOBILE_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <!-- Setup the Mobile Phone -->
        <call-map-processor in-map-name="parameters" out-map-name="faxMap">
            <simple-map-processor name="fax">
                <process field="USER_FAX_COUNTRY"><copy to-field="countryCode"/></process>
                <process field="USER_FAX_AREA"><copy to-field="areaCode"/></process>
                <process field="USER_FAX_CONTACT">
                    <copy to-field="contactNumber"/>                    
                    <!-- <not-empty><fail-property resource="PartyUiLabels" property="PartyFaxPhoneContactNumberMissing"/></not-empty> -->
                </process>
                <process field="USER_FAX_EXT"><copy to-field="extension"/></process>
                <process field="USER_FAX_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
    </simple-method>
    
</simple-methods>
