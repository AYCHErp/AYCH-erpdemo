<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<project name="Ant - Macros">
 <property name="minimumantversion" value="1.9.0"/>

 <antversion property="antversion" atleast="${minimumantversion}"/>
 <fail unless="antversion" message="Please upgrade ant to at least ${minimumantversion}. Current ant version is ${ant.version}"/>

 <condition property="javaatleast17">
  <not>
   <matches pattern="^1\.[0-6]($|\..*)" string="${ant.java.version}"/>
  </not>
 </condition>
 <fail unless="javaatleast17" message="Please upgrade java to at least 1.7. Current Java version is ${ant.java.version}"/>

 <dirname property="ofbiz.home.dir" file="${ant.file.Ant - Macros}"/>
 <!-- SCIPIO: NOTE: This macro is enhanced to supported nested implicit iterate-subant-args for the subant call -->
 <macrodef name="iterate">
  <attribute name="filelist" default="subdirs"/>
  <attribute name="target" default=""/>
  <attribute name="inheritall" default="false"/>
  <element name="iterate-subant-args" optional="yes" implicit="yes"/>
  <sequential>
   <subant target="@{target}" inheritall="@{inheritall}">
    <iterate-subant-args />
    <filelist refid="@{filelist}"/>
   </subant>
  </sequential>
 </macrodef>

 <patternset id="src.inc.set">
  <include name="**/*.java"/>
 </patternset>
 <patternset id="src.exc.set"/>

 <path id="groovy.class.path">
  <pathelement location="${ofbiz.home.dir}/framework/base/lib/scripting/groovy-all-2.4.5.jar"/>
 </path>
 <path id="rhino.class.path">
  <pathelement location="${ofbiz.home.dir}/extension/rhino/lib/js-1.7.R1.jar"/>
 </path>
 <path id="junit.class.path">
  <fileset dir="${ofbiz.home.dir}/framework/base/lib/scripting/" includes="*.jar"/>
  <pathelement location="${ofbiz.home.dir}/framework/base/lib/ant/ant-apache-bsf-1.7.1.jar"/>
 </path>
 <path id="cobertura.class.path">
  <pathelement location="${ofbiz.home.dir}/framework/base/lib/cobertura-1.9.4.1.jar" />
  <pathelement location="${ofbiz.home.dir}/framework/base/lib/log4j-1.2.17.jar" />
  <pathelement location="${ofbiz.home.dir}/framework/base/lib/scripting/asm-3.2.jar" />
  <pathelement location="${ofbiz.home.dir}/framework/base/lib/scripting/jakarta-oro-2.0.8.jar" />
 </path>
 <path id="local.class.path"/>
 <presetdef name="default-javac">
  <javac debug="on" deprecation="on" destdir="${build.dir}/classes" srcdir="${src.dir}" classpathref="local.class.path">
   <patternset refid="src.inc.set"/>
   <patternset refid="src.exc.set"/>
  </javac>
 </presetdef>

 <presetdef name="javac17">
  <default-javac compiler="javac1.7" target="1.7" source="1.7" encoding="UTF-8" includeantruntime="false">
   <compilerarg value="-Xlint:-path"/>
   <!--
   Please leave this line here.  It makes it easier to enable/disable it.
   <compilerarg value="-Xlint:unchecked"/>
   -->
  </default-javac>
 </presetdef>

 <presetdef name="default-javadoc">
    <javadoc classpathref="local.class.path"
             destdir="${build.dir}/javadocs"
             windowtitle="Apache OFBiz - ${desc}"
             useexternalfile="yes"
             maxmemory="512M"
             encoding="UTF-8"
             packagenames="org.ofbiz.*">
      <fileset dir="${basedir}" defaultexcludes="yes">
        <include name="**/*.java"/>
        <exclude name="**/ControlApplet.java"/>
        <exclude name="**/ShipmentScaleApplet.java"/>
        <exclude name="**/test/"/>
        <exclude name="**/cybersource/"/>
        <exclude name="**/PayPalServices.java"/>
        <exclude name="**/ideal/"/>
        <exclude name="**/orbital/"/>
        <exclude name="**/securepay/"/>
        <exclude name="**/verisign/"/>
        <exclude name="**/JREntityListIteratorDataSource.java"/>
        <exclude name="**/JRMapCollectionDataSource.java"/>
        <exclude name="**/openoffice/"/>
        <exclude name="**/JasperReportsXmlViewHandler.java"/>
        <exclude name="**/JasperReportsJXlsViewHandler.java"/>
        <exclude name="**/JasperReportsPoiXlsViewHandler.java"/>
      </fileset>
      <link href="http://java.sun.com/javase/7/docs/api/" offline="true" packagelistLoc="${ofbiz.home.dir}/tools/api-java17"/>
    </javadoc>
 </presetdef>

 <macrodef name="main-jar">
  <attribute name="jarfile" default="${build.dir}/lib/${name}.jar"/>
  <element name="main-pattern" optional="true"/>
  <element name="main-elements" optional="true"/>
  <sequential>
   <jar jarfile="@{jarfile}">
    <fileset dir="${build.dir}/classes">
     <exclude name="**/test"/>
     <exclude name="**/test/*"/>
     <main-pattern/>
    </fileset>
    <fileset dir="${src.extra.dir}">
     <and>
      <not>
       <or>
        <filename name="**/test"/>
        <filename name="**/test/*"/>
       </or>
      </not>
      <selector refid="src-extra-set"/>
     </and>
    </fileset>
    <!-- now add the NOTICE and LICENSE files to allow the jar file to be distributed alone -->
    <zipfileset dir="${ofbiz.home.dir}" prefix="META-INF" includes="NOTICE,LICENSE"/>
    <main-elements/>
   </jar>
  </sequential>
 </macrodef>

 <macrodef name="test-jar">
  <attribute name="jarfile" default="${build.dir}/lib/${name}-test.jar"/>
  <element name="test-selector" optional="true"/>
  <element name="test-elements" optional="true"/>
  <sequential>
   <jar jarfile="@{jarfile}">
    <fileset dir="${build.dir}/classes">
     <or>
      <filename name="**/test"/>
      <filename name="**/test/*"/>
      <test-selector/>
     </or>
    </fileset>
    <fileset dir="${src.dir}">
     <and>
      <filename name="**/test/*"/>
      <or>
       <test-selector/>
       <selector refid="src-extra-set"/>
      </or>
     </and>
    </fileset>
    <zipfileset dir="${ofbiz.home.dir}" prefix="META-INF" includes="NOTICE,LICENSE"/>
    <test-elements/>
   </jar>
  </sequential>
 </macrodef>

 <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="groovy.class.path"/>

 <presetdef name="default-groovyc">
  <groovyc destdir="${build.dir}/classes" srcdir="${src.dir}">
   <classpath>
    <path refid="local.class.path"/>
    <pathelement path="${build.dir}/classes"/>
   </classpath>
  </groovyc>
 </presetdef>
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
        <pathelement location="${ofbiz.home.dir}/framework/base/lib/ant/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>

 <presetdef name="externalsubant">
  <subant inheritall="false">
   <propertyset>
    <propertyref name="ofbiz.home.dir"/>
   </propertyset>
  </subant>
 </presetdef>
    
  <!-- ================================================================== -->
  <!-- SCIPIO: New macros and definitions  -->
  <!-- ================================================================== -->
    
    <!-- SCIPIO: Build invoker with automatic dependency resolution.
        Fetches the ofbiz.build.dependencies filelist from each component within a given component directory 
        and resolves the resulting dependency graph to determine a build order, mirroring the same 
        algorithm now used for the ofbiz-component.xml depends-on functionality (new 2017-01-17). -->
    <macrodef name="depressubant">
      <attribute name="dir" default=""/>
      <attribute name="target" default=""/>
      <attribute name="auto-build-tools" default="false"/>
      <sequential>
        <!-- Old stock code (arbitrary build order)
        <externalsubant target="@{target}">
          <fileset dir="@{dir}" casesensitive="no">
            <exclude name="disabled/**"/>
            <include name="*/build.xml"/>
          </fileset>
        </externalsubant>-->
          
        <if>
          <equals arg1="@{target}" arg2="" trim="true"/>
          <then>
            <var name="depres.displaytarget" value="build"/>
          </then>
          <else>
            <var name="depres.displaytarget" value="@{target}"/>
          </else>
        </if>
          
        <if>
          <equals arg1="@{auto-build-tools}" arg2="true"/>
          <then>
            <var name="scipio.buildtools.present" unset="true"/>
            <available file="tools/misc/scipio-build-tools.jar" property="scipio.buildtools.present" />
            <if>
              <not><isset property="scipio.buildtools.present"/></not>
              <then>
                <echo message="scipio-build-tools.jar not found! - triggering emergency build..."/>
                <antcall target="build-scipio-build-tools"/>
              </then>
            </if>
          </then>
        </if>
          
        <var name="depres.depgraph" unset="true"/>
        <var name="depres.depgraph" value="" />
        <var name="depres.topdirname" unset="true"/>
        <basename file="@{dir}" property="depres.topdirname"/>
          
        <echo message=""/>
        <echo message="${depres.topdirname}: Starting automatic build dependency resolution for task ${depres.displaytarget}..." />
          
        <!-- Build depgraph: read the ofbiz.build.dependencies values out of each build files and append to depgraph -->
        <for param="depres.buildfile">
          <path>
            <fileset dir="@{dir}" casesensitive="no">
              <exclude name="disabled/**"/>
              <include name="*/build.xml"/>
            </fileset>
          </path>
          <sequential>
            <var name="ofbiz.build.dependencies.prop" unset="true"/>
            <var name="depres.buildfile.dir" unset="true"/>
            <var name="depres.buildfile.name" unset="true"/>
            <var name="depres.buildfile.relative" unset="true"/>
              
            <dirname file="@{depres.buildfile}" property="depres.buildfile.dir"/>
            <basename file="@{depres.buildfile}" property="depres.buildfile.name"/>
            <property name="depres.buildfile.relative" value="@{depres.buildfile}" relative="true" />

            <!-- Special call using ant-contrib to read dependency list stored in external build file -->
            <var name="ofbiz.build.dependencies.prop" unset="true" />
            <antcallback dir="${depres.buildfile.dir}" target="get-ofbiz-build-dependencies" antfile="${depres.buildfile.name}"
              inheritall="false" return="ofbiz.build.dependencies.prop">
              <!--<property name="basedir" value="${depres.buildfile.dir}"/>-->
              <property name="ofbiz.build.dependencies.sep" value=","/>
              <propertyset>
                <propertyref name="ofbiz.home.dir"/>
              </propertyset>
            </antcallback>

            <if>
              <and>
                <isset property="ofbiz.build.dependencies.prop" />
                <not><equals arg1="${ofbiz.build.dependencies.prop}" arg2="" trim="true"/></not>
              </and>
              <then>
                <var name="depres.depgraph" value="${depres.depgraph}#${depres.buildfile.relative}=${ofbiz.build.dependencies.prop}" />
              </then>
              <else>
                <var name="depres.depgraph" value="${depres.depgraph}#${depres.buildfile.relative}" />
              </else>
            </if>
          </sequential>
        </for>
          
        <if>
          <or>
            <not><isset property="depres.depgraph"/></not>
            <equals arg1="${depres.depgraph}" arg2="" trim="true"/>
          </or>
          <then>
            <echo message="${depres.topdirname}: No builds to invoke." /> 
          </then>
          <else>
            <!-- verbose
            <echo message="Dependency graph for ${depres.topdirname}:${line.separator}${depres.depgraph}" />  
            -->
            
            <!-- Invoke automatic dependency resolution algorithm -->
            <var name="depres.builds" unset="true"/>
            <var name="depres.stderr" unset="true"/>
            <var name="depres.result" unset="true"/>  
            <java classname="com.ilscipio.scipio.ce.build.util.DependencyGraph" fork="true" 
              outputproperty="depres.builds" errorproperty="depres.stderr" resultproperty="depres.result" failonerror="false">
              <arg value="-f=resolve-deps-dfs"/><!-- function to run -->
              <!-- NOTE: using comma as file separator because fileset "includes" attributes uses this -->
              <arg value="-do=,"/><!-- output delimiter -->
              <arg value="-dn=#"/><!-- graph entry delimiter -->
              <arg value="-de=="/><!-- graph element=deps pairs delimiter -->
              <arg value="-dd=,"/><!-- graph deps delimiter -->
              <arg value="-s=false"/><!-- strict mode -->
              <arg value="-e=false"/><!-- use empty values -->
              <arg value="-g=${depres.depgraph}"/>
              <classpath>
                <path location="tools/misc/scipio-build-tools.jar"/> <!-- FIXME: non-ideal location for this class -->
              </classpath>
            </java>
            <if>
              <not><equals arg1="${depres.result}" arg2="0"/></not>
              <then>
                <fail message="Error automatically resolving build dependencies for ${depres.topdirname} components:${line.separator}${line.separator}
${depres.stderr}${line.separator}${line.separator}
Please verify the ${depres.topdirname} component build.xml files
for possible errors in the ofbiz.build.dependencies build file references."/>
              </then>
            </if>
            <echo message="${depres.topdirname}: Auto-determined build order from dependencies (ofbiz.build.dependencies):" />
            <echo message="${depres.builds}" />
            
            <!-- Sanity check -->
            <if>
              <or>
                <not><isset property="depres.builds"/></not>
                <equals arg1="${depres.builds}" arg2="" trim="true"/>
              </or>
              <then>
                <fail message="Error automatically resolving build dependencies for ${depres.topdirname} components:${line.separator}${line.separator}
${depres.stderr}${line.separator}${line.separator}
Unexpectedly received empty list of builds to iterate."/>
              </then>
            </if>
            
            <!-- Invoke build files with requested target, in the resolved order (after re-expand comma-separated deresbuilds names to file list) --> 
            <externalsubant target="@{target}">
              <filelist dir="${ofbiz.home.dir}" files="${depres.builds}"/>
            </externalsubant>
          </else>
        </if>
      </sequential>
    </macrodef>
    
    <!-- FIXME?: get-ofbiz-build-dependencies must currently be defined in macros.xml due to theme patterns... -->
    <target name="get-ofbiz-build-dependencies"
        description="Returns this component's build dependencies, for automatic dependency resolution (SCIPIO)">
        <!-- 
        NOTE: Caller must specify:
          * ofbiz.build.dependencies.sep (context-dependent)
          * ofbiz.home.dir
        -->
        <if>
            <isreference refid="ofbiz.build.dependencies"/>
            <then>
                <var name="ofbiz.build.dependencies.prop" unset="true" />
                <pathconvert property="ofbiz.build.dependencies.prop" refid="ofbiz.build.dependencies" 
                    pathsep="${ofbiz.build.dependencies.sep}" setonempty="true">
                    <!-- strip the full path, make relative to ofbiz base folder (most versatile) -->
                    <globmapper from="${ofbiz.home.dir}/*" to="*" />
                </pathconvert>
                <!-- will be read using ant-contrib's antcallback/antfetch
                <echo message="${ofbiz.build.dependencies.prop}"/>-->
            </then>
            <else>
                <property name="ofbiz.build.dependencies.prop" value="" />
            </else>
        </if>
    </target>
    
</project>
